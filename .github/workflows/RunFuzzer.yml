name: Run Afl++ Fuzzer
on:
  workflow_dispatch:
    inputs:
      duckdbRepo:
        description: 'duckdb repository'
        required: true
        type: string
        default: duckdb/duckdb
      ref:
        description: 'duckdb branch, tag, or full-length SHA'
        required: true
        type: string
        # oldest usable ref: 4ebeb16350eb2f819d682c581490af460dd0c995
        default: v1.2.0
      fuzzer:
        description: 'fuzz scenario'
        required: true
        type: choice
        options:
          - csv_multi_param_fuzzer
          - json_multi_param_fuzzer
          - parquet_multi_param_fuzzer
        default: csv_multi_param_fuzzer
      fuzzTime:
        description: 'fuzz time (seconds)'
        required: true
        type: number
        default: 3600
      cacheAFL:
        description: 'cache AFL++ binaries'
        required: true
        type: boolean
        default: true
      cacheDuckDB:
        description: 'use ccache for DuckDB'
        required: true
        type: boolean
        default: true

jobs:
  aflplusplus-fuzz-run:
    name: AFL++ fuzz run
    runs-on: ubuntu-24.04
    env:
      CC: ${{ github.workspace }}/bin/afl-clang-fast
      CXX: ${{ github.workspace }}/bin/afl-clang-fast++
      DUCKDB_DIR: ${{ github.workspace }}/duckdb
      DUCKDB_AFLPLUSPLUS_DIR: ${{ github.workspace }}/duckdb_aflplusplus

    steps:
      - name: print fuzz scenario
        run: |
          echo $GITHUB_SHA
          echo ${{ inputs.duckdbRepo }}
          echo ${{ inputs.ref }}
          echo ${{ inputs.fuzzer }}
          echo ${{ inputs.fuzzTime }}

      - name: define input dependent variables
        run: |
          case ${{ inputs.fuzzer }} in
            csv_multi_param_fuzzer)
              echo "CREATE_CORPUS_INFO_ARGS=read_csv $DUCKDB_DIR $DUCKDB_DIR/test" >> $GITHUB_ENV
              echo "CREATE_CORPUS_ARGS=read_csv $DUCKDB_DIR" >> $GITHUB_ENV
              echo "FILE_FORMAT=csv" >> $GITHUB_ENV
              ;;
            json_multi_param_fuzzer)
              echo "CREATE_CORPUS_INFO_ARGS=read_json $DUCKDB_DIR $DUCKDB_DIR/test" >> $GITHUB_ENV
              echo "CREATE_CORPUS_ARGS=read_json $DUCKDB_DIR" >> $GITHUB_ENV
              echo "FILE_FORMAT=json" >> $GITHUB_ENV
              ;;
            parquet_multi_param_fuzzer)
              echo "CREATE_CORPUS_INFO_ARGS=read_parquet $DUCKDB_DIR $DUCKDB_DIR/test" >> $GITHUB_ENV
              echo "CREATE_CORPUS_ARGS=read_parquet $DUCKDB_DIR" >> $GITHUB_ENV
              echo "FILE_FORMAT=parquet" >> $GITHUB_ENV
              ;;
            *)
              echo unsupported fuzzer
              exit 1
              ;;
          esac

      # https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/INSTALL.md
      - name: Install AFL++ dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev automake cmake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools cargo libgtk-3-dev
          sudo apt-get install -y lld-14 llvm-14 llvm-14-dev clang-14 || sudo apt-get install -y lld llvm llvm-dev clang
          sudo apt-get install -y gcc-$(gcc --version|head -n1|sed 's/\..*//'|sed 's/.* //')-plugin-dev libstdc++-$(gcc --version|head -n1|sed 's/\..*//'|sed 's/.* //')-dev

      - name: Install DuckDB dependencies
        run: |
          sudo apt-get install -y ninja-build

      - name: Checkout duckdb_aflplusplus
        uses: actions/checkout@v4
        with:
          path: duckdb_aflplusplus

      - name: Checkout aflplusplus
        id: checkout-aflplusplus
        uses: actions/checkout@v4
        with:
          repository: aflplusplus/aflplusplus
          ref: v4.30c
          path: aflplusplus

      - name: Checkout duckdb
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: ${{ inputs.duckdbRepo }}
          ref: ${{ inputs.ref }}
          path: duckdb

      # /proc/sys/kernel/core_pattern needs to be adjusted, see:
      # https://github.com/AFLplusplus/AFLplusplus/blob/fb52b8edf86e12628df834f4bb144916b18a503d/src/afl-fuzz-init.c#L2476C1-L2489C70
      - name: Config step
        working-directory: ${{ env.DUCKDB_AFLPLUSPLUS_DIR }}
        run: |
          echo core | sudo tee /proc/sys/kernel/core_pattern
          mkdir -p build
          mkdir -p corpus
          mkdir -p fuzz_results

      # https://github.com/AFLplusplus/AFLplusplus/blob/stable/GNUmakefile
      - name: Cache AFL++ binaries
        if: ${{ inputs.cacheAFL }}
        id: cache-aflplusplus
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/bin/afl*
            ${{ github.workspace }}/lib/afl/*
            ${{ github.workspace }}/share/doc/afl/*
            ${{ github.workspace }}/share/afl/*
            ${{ github.workspace }}/share/man/man8/*
            ${{ github.workspace }}/include/afl/*
            ${{ github.workspace }}/aflplusplus/afl-fuzz
            ${{ github.workspace }}/aflplusplus/afl-clang-fast
            ${{ github.workspace }}/aflplusplus/afl-clang-fast++
          key: ${{ runner.os }}-aflplusplus-${{ steps.checkout-aflplusplus.outputs.commit }}

      - name: build AFL++
        if: steps.cache-aflplusplus.outputs.cache-hit != 'true'
        working-directory: aflplusplus
        run: |
          sudo make PREFIX=${{ github.workspace }} source-only
          sudo make PREFIX=${{ github.workspace }} install

      - name: AFL++ version
        run: |
          ${{ github.workspace }}/bin/afl-fuzz --version
          $CC --version
          $CXX --version

      - name: Setup ccache
        if: ${{ inputs.cacheDuckDB }}
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}

      - name: Compile DuckDB with afl++ compiler
        run: |
          make -C $DUCKDB_AFLPLUSPLUS_DIR/src \
          DUCKDB_DIR=$DUCKDB_DIR \
          DUCKDB_AFLPLUSPLUS_DIR=$DUCKDB_AFLPLUSPLUS_DIR \
          CC=$CC \
          CXX=$CXX \
          BUILD_JEMALLOC=1 \
          USE_CCACHE=1 \
          duckdb-lib

      - name: duckdb version
        working-directory: ${{ env.DUCKDB_DIR }}
        run: |
          ./build/release/duckdb --version

      # NOTE: duckdb-python is only used for pre and post processing; does not have to be compiled from source
      - name: Install duckdb python API
        run: |
          pip3 install duckdb
          pip3 list | grep duckdb

      - name: Compile Fuzz target
        run: |
          make -C $DUCKDB_AFLPLUSPLUS_DIR/src \
          DUCKDB_DIR=$DUCKDB_DIR \
          DUCKDB_AFLPLUSPLUS_DIR=$DUCKDB_AFLPLUSPLUS_DIR \
          CC=$CC \
          CXX=$CXX \
          BUILD_JEMALLOC=1 \
          USE_CCACHE=1 \
          $DUCKDB_AFLPLUSPLUS_DIR/build/${{ inputs.fuzzer }}

      - name: Create corpus
        working-directory: ${{ env.DUCKDB_AFLPLUSPLUS_DIR }}
        run: |
          chmod +x scripts/corpus_creation/create_multi_param_corpus_info.py
          chmod +x scripts/corpus_creation/create_multi_param_corpus.py
          ./scripts/corpus_creation/create_multi_param_corpus_info.py ${{ env.CREATE_CORPUS_INFO_ARGS }}
          ./scripts/corpus_creation/create_multi_param_corpus.py ${{ env.CREATE_CORPUS_ARGS }}

      - name: Start fuzzing
        working-directory: ${{ env.DUCKDB_AFLPLUSPLUS_DIR }}
        env:
          AFL_IGNORE_SEED_PROBLEMS: 1
        run: |
          ${{ github.workspace }}/bin/afl-fuzz \
          -V ${{ inputs.fuzzTime }} \
          -i $DUCKDB_AFLPLUSPLUS_DIR/corpus/$FILE_FORMAT/corpus_prepended \
          -o $DUCKDB_AFLPLUSPLUS_DIR/fuzz_results/${{ inputs.fuzzer }} \
          -m none \
          -d \
          -- $DUCKDB_AFLPLUSPLUS_DIR/build/${{ inputs.fuzzer }}
          tar -cvf ${{ github.workspace }}/fuzz_results.tar fuzz_results/${{ inputs.fuzzer }}

      - name: Store fuzz result as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.run_id }}-${{ inputs.fuzzer }}
          path: fuzz_results.tar

      - name: Add summary statistics
        working-directory: ${{ env.DUCKDB_AFLPLUSPLUS_DIR }}
        run: |
          NUM_CRASHES=$(ls -l fuzz_results/${{ inputs.fuzzer }}/default/crashes | grep id: | wc -l | sed 's/ *//')
          NUM_HANGS=$(ls -l fuzz_results/${{ inputs.fuzzer }}/default/hangs | grep id: | wc -l | sed 's/ *//')
          NUM_QUEUE=$(ls -l fuzz_results/${{ inputs.fuzzer }}/default/queue | grep id: | wc -l | sed 's/ *//')
          echo "::notice::crahses found: $NUM_CRASHES"
          echo "::notice::hangs found: $NUM_HANGS"
          echo "::notice::queue length: $NUM_QUEUE"
          echo "NUM_CRASHES=$NUM_CRASHES" >> "$GITHUB_OUTPUT"
          echo "NUM_HANGS=$NUM_HANGS" >> "$GITHUB_OUTPUT"
          echo "NUM_QUEUE=$NUM_QUEUE" >> "$GITHUB_OUTPUT"

  process-fuzz-results:
    runs-on: ubuntu-24.04
    needs: aflplusplus-fuzz-run

    steps:
      - name: print fuzz statistics
        run: |
          echo crahses found: ${{ env.NUM_CRASHES }}
          echo hangs found: ${{ env.NUM_HANGS }}
          echo queue length: ${{ env.NUM_QUEUE }}

      - name: download fuzz-results (created by previous step)
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.run_id }}-${{ inputs.fuzzer }}

      - name: extract fuzz-results
        run: |
          ls -la
          tar -xvf fuzz_results.tar

      - name: decode fuzz results
        run: |
          chmod +x scripts/reproductions/decode_multi_param_files.py
          ./scripts/reproductions/decode_multi_param_files.py \
            read_$FILE_FORMAT \
            ${{ github.workspace }}/fuzz_results/${{ inputs.fuzzer }}/default/crashes \
            ${{ github.workspace }}/reproductions
          tar -cvf ${{ github.workspace }}/reproductions.tar ${{ github.workspace }}/reproductions

      - name: Store reproductions as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.run_id }}-${{ inputs.fuzzer }}-reproductions
          path: reproductions.tar
